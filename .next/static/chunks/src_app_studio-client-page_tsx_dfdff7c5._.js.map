{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/dev28/Desktop/projects/flowstudio2/src/app/studio-client-page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useCallback, useMemo } from 'react';\nimport type { Node } from 'reactflow';\nimport { ReactFlowProvider, useReactFlow } from 'reactflow';\nimport { nanoid } from 'nanoid';\n\nimport HeaderBar from '@/components/HeaderBar';\nimport SidebarPalette, { PaletteItemPayload } from '@/components/SidebarPalette';\nimport CanvasWithLayoutWorker from '@/components/CanvasWithLayoutWorker/CanvasWithLayoutWorker';\nimport PropertiesPanel from '@/components/PropertiesPanel';\nimport { useFlowStore, useFlowMetaStore, undo, redo } from '@/store/flow';\nimport TestConsole from '@/components/TestConsole';\nimport { useUIStore } from '@/store/ui';\nimport PublishBanner from '@/components/Presence/PublishBanner';\nimport { FlowEngine } from '@/engine/FlowEngine';\nimport { useHistoryStore } from '@/store/history';\nimport { Dialog } from '@/components/ui/dialog';\n\nfunction StudioPageContent() {\n  const { nodes, edges, addNode, setNodes, onNodesChange, onEdgesChange, onConnect } = useFlowStore();\n  const { meta, setTitle, setChannels, setPublished, setWaContext } = useFlowMetaStore();\n\n  const [selectedNode, setSelectedNode] = useState<Node | null>(null);\n  const { isTestConsoleOpen, toggleTestConsole } = useUIStore();\n  const { canUndo, canRedo } = useHistoryStore();\n\n  const engine = useMemo(() => new FlowEngine({ channel: meta.channels[0], clock: 'real' }), [meta.channels]);\n  const { project } = useReactFlow();\n\n  engine.setFlow(nodes, edges);\n\n  const handleNodeDoubleClick = useCallback((_event: React.MouseEvent, node: Node) => {\n    // Don't open properties for message nodes as they have inline controls\n    if (node.data?.type === 'messaging') {\n      setSelectedNode(null);\n      return;\n    }\n    setSelectedNode(node);\n  }, []);\n\n  const handleSaveNode = (nodeId: string, data: Record<string, any>) => {\n    setNodes(\n      nodes.map((n) => (n.id === nodeId ? { ...n, data: { ...n.data, ...data } } : n))\n    );\n  };\n\n  const handleDragStart = (_e: React.DragEvent, item: PaletteItemPayload) => {\n    // This is handled by ReactFlow's onDrop, but you could add logic here\n  };\n\n  const handleClickAdd = (item: PaletteItemPayload) => {\n    const { x, y } = project({ x: window.innerWidth / 2, y: window.innerHeight / 2 });\n    const newNode: Node = {\n      id: nanoid(),\n      type: 'base',\n      position: { x: x - 200, y: y - 100 }, // Center it\n      data: { \n        label: item.label, \n        icon: item.icon,\n        color: item.color,\n        description: item.description,\n        type: item.type,\n      },\n    };\n    addNode(newNode);\n  };\n\n  return (\n    <div className=\"h-screen w-screen grid grid-rows-[56px_1fr] md:grid-cols-[280px_1fr] bg-background text-foreground relative overflow-hidden\">\n      <PublishBanner />\n      <div className=\"col-span-full row-start-1 z-10\">\n        <HeaderBar\n            title={meta.title}\n            onSave={setTitle}\n            channels={meta.channels}\n            onChannelsChange={setChannels}\n            waContext={meta.waMessageContext}\n            onWaContextChange={setWaContext}\n            isPublished={meta.published}\n            onPublishToggle={setPublished}\n            onUndo={undo}\n            onRedo={redo}\n            canUndo={canUndo}\n            canRedo={canRedo}\n            onTest={toggleTestConsole}\n            onSaveClick={() => console.log('Save clicked!', { meta, nodes, edges })}\n        />\n      </div>\n      <aside className=\"hidden md:block col-start-1 row-start-2 overflow-y-auto border-r border-border z-10 bg-background\">\n        <div className=\"p-4 sidebar-scroll\">\n            <SidebarPalette onDragStart={handleDragStart} onItemClick={handleClickAdd} filterChannels={meta.channels} />\n        </div>\n      </aside>\n      <main className=\"md:col-start-2 row-start-2 col-start-1 relative overflow-hidden bg-background\">\n        <CanvasWithLayoutWorker\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          setNodes={setNodes}\n          onNodeDoubleClick={handleNodeDoubleClick}\n          viewportKey=\"flow-editor-viewport\"\n        />\n      </main>\n      <Dialog open={!!selectedNode} onOpenChange={(isOpen) => !isOpen && setSelectedNode(null)}>\n        <PropertiesPanel\n          node={selectedNode}\n          onClose={() => setSelectedNode(null)}\n          onSave={handleSaveNode}\n          waContext={meta.waMessageMessageContext}\n          channels={meta.channels}\n        />\n      </Dialog>\n      <TestConsole isOpen={isTestConsoleOpen} onClose={toggleTestConsole} engine={engine} flowId={meta.id} />\n    </div>\n  );\n}\n\n\nexport default function StudioClientPage() {\n    return (\n        <ReactFlowProvider>\n            <StudioPageContent />\n        </ReactFlowProvider>\n    )\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}